package net.minestom.codegen;

import java.util.LinkedList;
import java.util.List;

/**
 * Helper class to generate a .java enum
 */
public class EnumGenerator implements CodeGenerator {

    private static final String COMMENT = "//==============================\n//  AUTOGENERATED BY " + EnumGenerator.class.getSimpleName() + "\n//==============================";

    private final String enumName;
    private String[] parameters;
    private List<Method> methods = new LinkedList<>();
    private List<Instance> instances = new LinkedList<>();
    private List<String> imports = new LinkedList<>();
    private List<Field> hardcodedFields = new LinkedList<>();
    private List<String> annotations = new LinkedList<>();
    private String enumPackage;
    private String staticBlock;
    private StringBuilder constructorEnd = new StringBuilder();

    public EnumGenerator(String packageName, String enumName) {
        this.enumPackage = packageName;
        parameters = new String[0];
        this.enumName = enumName;
    }

    public void setParams(String... parameters) {
        this.parameters = parameters;
    }

    public void addMethod(String name, String signature, String returnType, String... lines) {
        methods.add(new Method(true, name, signature, returnType, lines));
    }

    public void addPackageMethod(String name, String signature, String returnType, String... lines) {
        methods.add(new Method(false, name, signature, returnType, lines));
    }

    public void addInstance(String name, Object... parameters) {
        instances.add(new Instance(name, parameters));
    }

    public String generate() {
        StringBuilder builder = new StringBuilder();
        builder.append(COMMENT);
        builder.append("\npackage ").append(enumPackage).append(";\n");
        for (String imp : imports) {
            builder.append("import ").append(imp).append(";\n");
        }
        for (String annotation : annotations) {
            builder.append(annotation).append("\n");
        }
        builder.append("\npublic enum ").append(enumName).append(" {\n");

        // generate instances
        for (Instance instance : instances) {
            builder.append("\t");
            builder.append(instance.name).append("(");
            Object[] objects = instance.parameters;
            for (int i = 0; i < objects.length; i++) {
                Object param = objects[i];
                if (i != 0) {
                    builder.append(", ");
                }
                builder.append(param.toString());
            }
            builder.append("),\n");
        }
        builder.append(";\n");

        if (staticBlock != null) {
            builder.append("\n\tstatic {\n");
            builder.append(staticBlock);
            builder.append("\t}\n\n");
        }

        // generate properties & constructor
        if (parameters.length != 0) {
            // properties
            for (String property : parameters) {
                builder.append("\t");
                builder.append("private ").append(property).append(";\n");
            }
            builder.append("\n");

            // hard coded fields
            for (Field hardcoded : hardcodedFields) {
                builder.append("\tprivate ").append(hardcoded.type).append(" ").append(hardcoded.name).append(" = ").append(hardcoded.value).append(";");
                builder.append("\n");
            }

            // constructor
            builder.append("\t");
            builder.append(enumName).append("(");
            for (int i = 0; i < parameters.length; i++) {
                if (i != 0) {
                    builder.append(", ");
                }
                builder.append(parameters[i]);
            }
            builder.append(") {\n");

            // property assignment
            for (String property : parameters) {
                String[] parts = property.split(" ");
                String type = parts[0];
                String name = parts[1];
                builder.append("\t\t");
                builder.append("this.").append(name).append(" = ").append(name).append(";\n");
            }

            builder.append(constructorEnd);

            builder.append("\t}\n");
        }

        // generate methods
        for (Method m : methods) {
            builder.append("\n");
            builder.append("\t");
            if (m.isPublic) {
                builder.append("public ");
            }
            builder.append(m.returnType).append(" ").append(m.name).append(m.signature).append(" {\n");

            for (String line : m.lines) {
                builder.append("\t\t").append(line).append("\n");
            }

            builder.append("\t}\n");
        }

        builder.append("}\n");
        return builder.toString();
    }

    public void setEnumPackage(String enumPackage) {
        this.enumPackage = enumPackage;
    }

    public void addImport(String canonicalName) {
        imports.add(canonicalName);
    }

    public void setStaticInitBlock(String staticBlock) {
        this.staticBlock = staticBlock;
    }

    public void appendToConstructor(String... lines) {
        for (String line : lines) {
            constructorEnd.append("\t\t").append(line).append("\n");
        }
    }

    public void addHardcodedField(String type, String name, String value) {
        hardcodedFields.add(new Field(type, name, value));
    }

    public void addClassAnnotation(String annotation) {
        annotations.add(annotation);
    }

    public String getPackage() {
        return enumPackage;
    }

    public String getEnumName() {
        return enumName;
    }

    private static class Method {
        private final boolean isPublic;
        private String name;
        private String signature;
        private String returnType;
        private String[] lines;

        private Method(boolean isPublic, String name, String signature, String returnType, String[] lines) {
            this.isPublic = isPublic;
            this.name = name;
            this.signature = signature;
            this.returnType = returnType;
            this.lines = lines;
        }
    }

    private static class Field {
        private String type;
        private String name;
        private String value;

        public Field(String type, String name, String value) {
            this.type = type;
            this.name = name;
            this.value = value;
        }
    }

    private static class Instance {
        private String name;
        private Object[] parameters;

        private Instance(String name, Object[] parameters) {
            this.name = name;
            this.parameters = parameters;
        }
    }
}
